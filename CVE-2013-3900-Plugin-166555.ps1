<# 
.SYNOPSIS
  Enable, Disable, or Check the CVE-2013-3900 mitigation that Nessus Plugin 166555 verifies.
.DESCRIPTION
  Sets HKLM:\SOFTWARE\Microsoft\Cryptography\Wintrust\Config\EnableCertPaddingCheck (DWORD)
  And (on 64-bit OS) HKLM:\SOFTWARE\Wow6432Node\Microsoft\Cryptography\Wintrust\Config\EnableCertPaddingCheck (DWORD)
.PARAMETER Action
  Enable  - sets value to 1 (mitigation ON; compliant)
  Disable - sets value to 0 (mitigation OFF; non-compliant)
  Check   - reports current state (default)
.EXAMPLE
  .\Set-CVE20133900Mitigation.ps1 -Action Enable
.EXAMPLE
  .\Set-CVE20133900Mitigation.ps1 -Action Check
#>

[CmdletBinding(SupportsShouldProcess = $true)]
param(
    [ValidateSet('Enable','Disable','Check')]
    [string]$Action = 'Check'
)

function Assert-Admin {
    $id  = [Security.Principal.WindowsIdentity]::GetCurrent()
    $pri = New-Object Security.Principal.WindowsPrincipal($id)
    if (-not $pri.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        throw "Run this script in an elevated PowerShell session (Run as administrator)."
    }
}

$regPaths = @("HKLM:\SOFTWARE\Microsoft\Cryptography\Wintrust\Config")
if ([Environment]::Is64BitOperatingSystem) {
    $regPaths += "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Cryptography\Wintrust\Config"
}
$valName = "EnableCertPaddingCheck"

function Get-State {
    $rows = foreach ($p in $regPaths) {
        $exists = Test-Path $p
        $val = $null
        if ($exists) {
            try { $val = (Get-ItemProperty -Path $p -Name $valName -ErrorAction Stop).$valName } catch { $val = $null }
        }
        [pscustomobject]@{
            Path   = $p
            Exists = $exists
            Value  = $val
            Status = if ($val -eq 1) {'Enabled'} elseif ($val -eq 0) {'Disabled'} else {'Missing'}
        }
    }
    $overall = if ($rows.Status -contains 'Missing' -or $rows.Status -contains 'Disabled') {'Non-Compliant'} else {'Compliant'}
    [pscustomobject]@{
        Plugin  = '166555'
        CVE     = 'CVE-2013-3900'
        Overall = $overall
        Details = $rows
    }
}

switch ($Action) {
    'Check'   { Get-State; break }

    'Enable'  {
        Assert-Admin
        foreach ($p in $regPaths) {
            if (-not (Test-Path $p)) { New-Item -Path $p -Force | Out-Null }
            if ($PSCmdlet.ShouldProcess("$p\$valName", "Set to 1 (REG_DWORD)")) {
                New-ItemProperty -Path $p -Name $valName -Value 1 -PropertyType DWord -Force | Out-Null
            }
        }
        Get-State; break
    }

    'Disable' {
        Assert-Admin
        foreach ($p in $regPaths) {
            if (-not (Test-Path $p)) { New-Item -Path $p -Force | Out-Null }
            if ($PSCmdlet.ShouldProcess("$p\$valName", "Set to 0 (REG_DWORD)")) {
                New-ItemProperty -Path $p -Name $valName -Value 0 -PropertyType DWord -Force | Out-Null
            }
        }
        Get-State; break
    }
}
